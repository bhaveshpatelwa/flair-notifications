syntax = "proto3";

package messages;

option java_package = "com.flair.bi.messages";
option java_multiple_files = true;


message ScheduleReportRequest {
    Report report = 1;
    ReportLineItem report_line_item = 2;
    AssignReport assign_report = 3;
    Schedule schedule = 4;
    string query = 5;
}

message ScheduleReport {
    Report report = 1;
    ReportLineItem report_line_item = 2;
    AssignReport assign_report = 3;
    Schedule schedule = 4;
    string query = 5;
}


message Report {
    string userid = 1;
    string dashboard_name = 2;
    string view_name = 3;
    string share_link = 4;
    string build_url = 5;
    string mail_body = 6;
    string subject = 7;
    string report_name = 8;
    string title_name = 9;
}

message ReportLineItem {
    string visualizationid = 1;
    repeated string dimension = 2;
    repeated string measure = 3;
    string visualization = 4;
}

message AssignReport {
    string channel = 1;
    string slack_API_Token = 2;
    string channel_id = 3;
    string stride_API_Token = 4;
    string stride_cloud_id = 5;
    string stride_conversation_id = 6;
    repeated Email email_list = 7;
}

message Email {
    string user_email = 1;
    string user_name = 2;
}

message Schedule {
    string cron_exp = 1;
    string timezone = 2;
    string start_date = 3;
    string end_date = 4;

}

message DeleteScheduledReportRequest {
    string visualizationId = 1;
}

message GetScheduledReportRequest {
    string visualizationId = 1;
}

message ScheduleReportResponse {
    string message = 1;
}

message RepUserReq {
  string username = 1;
}
message RepUserResp {
    repeated ScheduleReport reports = 1;
}

message RepUserCountReq {
    string username = 1;
}

message RepUserCountResp {
    int32 totalReports = 1;
}

service ReportService {
    rpc GetScheduledReport(GetScheduledReportRequest) returns (ScheduleReportResponse) {};
    rpc GetAllScheduledReportsByUser(RepUserReq) returns (RepUserResp) {};
    rpc GetAllScheduledReportsCountsByUser(RepUserCountReq) returns (RepUserCountResp) {};
    rpc ScheduleReport(ScheduleReportRequest) returns (ScheduleReportResponse) {};
    rpc UpdateScheduledReport(ScheduleReportRequest) returns (ScheduleReportResponse) {};
    rpc DeleteScheduledReport(DeleteScheduledReportRequest) returns (ScheduleReportResponse) {};
}
